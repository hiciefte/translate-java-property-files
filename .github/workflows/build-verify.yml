name: Build and Verify

on:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-verify:
    runs-on: ubuntu-latest
    permissions:
      security-events: write

    steps:
      - name: Checkout repository
        # Pin to the major version tag for stability and to avoid invalid SHAs.
        uses: actions/checkout@v4

      - name: Lint Dockerfile with Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: docker/Dockerfile
          config: .hadolint.yaml
          failure-threshold: warning # Fails on warnings or errors

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Scan Python dependencies for vulnerabilities
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip-audit -r requirements.txt
          pip-audit -r requirements-dev.txt

      - name: Lint Python code
        run: |
          ruff check .

      - name: Run unit tests with pytest
        run: |
          pip install -r requirements-dev.txt
          pytest

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create dummy secret files (for CI build only)
        run: |
          # These files are required for the Docker build's COPY step to succeed.
          # They are empty and do not contain real secrets.
          mkdir -p secrets/gpg_bot_key
          touch secrets/gpg_bot_key/bot_public_key.asc
          touch secrets/gpg_bot_key/bot_secret_key.asc
          # The build process requires a .env file to be present, but the values are not
          # used in the CI environment. We create a dummy file to satisfy this requirement.
          echo "DUMMY_KEY=123" > docker/.env

      # QEMU not required unless building multi-arch
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          load: true
          tags: translator-app:ci-${{ github.sha }}
          build-args: |
            SKIP_GPG_IMPORT=true
            GPG_KEY_FINGERPRINT_FOR_TRUST=DUMMY_FINGERPRINT_FOR_CI
          secrets: |
            ${{ secrets.DEPLOY_KEY != '' && format('deploy_key={0}', secrets.DEPLOY_KEY) || '' }}

      - name: Display Docker Image Info
        run: docker images

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.31.0
        with:
          image-ref: 'translator-app:ci-${{ github.sha }}'
          # Temporarily switch to 'table' format to identify the new CVEs causing the failure.
          format: 'table'
          # output: 'trivy-results.sarif'
          # Fail the build if any critical or high severity vulnerabilities are found.
          exit-code: '1'
          # Ignore vulnerabilities that are not yet fixed by the base image maintainers, or that
          # are deemed not applicable to our use case.
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          # Use a .trivyignore file to manage a persistent list of ignored CVEs.
          # This provides a clear, version-controlled record of accepted risks.
          trivyignores: '.trivyignore'

      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: 'trivy-results.sarif' 