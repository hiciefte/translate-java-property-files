services:
  translator:
    # Use environment variables to make container and volume names unique per instance
    container_name: ${CONTAINER_NAME:-translator-service}
    build:
      context: .. # Build context is the project root
      dockerfile: docker/Dockerfile # Path to Dockerfile from project root
      args:
        # Pass the deploy key name as a build argument.
        # This can be set in the .env file or the shell environment.
        - DEPLOY_KEY_NAME=${DEPLOY_KEY_NAME:-id_ed25519}
      secrets:
        # Make the deploy_key secret available to the build process
        - deploy_key
    # The entrypoint is defined in the Dockerfile.
    # By default, run the main orchestration script. Can be overridden for debugging.
    command: ["/app/update-translations.sh"]
    volumes:
      # Mount the target repository into the container.
      # The '${VOLUME_NAME:-target-repo-data}' allows for multiple, isolated instances
      # by using a named volume that can be overridden by an environment variable.
      - ${VOLUME_NAME:-target-repo-data}:/target_repo
      # Mount configuration and glossary files.
      - ./config.docker.yaml:/app/config.yaml:ro
      - ../glossary.json:/app/glossary.json:ro
      # Mount logs directory (in project root) for persistence
      - ../logs:/app/logs
    # The container will start as root, and the entrypoint script will drop privileges to 'appuser'.
    # This allows the entrypoint to fix volume permissions before the main application runs.
    env_file:
      - .env
    environment:
      # Pass the absolute path of the config file inside the container to the application.
      # This makes the script's starting location irrelevant for finding its config.
      - TRANSLATOR_CONFIG_FILE=/app/config.yaml
    # Note: Place the .env file alongside this compose file (docker/.env)
    # with API keys and HOST_UID/GID.
    # An example is provided in docker/.env.example

# Define the named volume. The name used here is the default.
# The ${VOLUME_NAME} environment variable in the service's volumes section
# can still point to a differently named volume if needed.
volumes:
  target-repo-data:

# Define the secret for the SSH deploy key.
# The filename can be controlled via the DEPLOY_KEY_NAME environment variable.
secrets:
  deploy_key:
    file: ../secrets/deploy_key/${DEPLOY_KEY_NAME:-id_ed25519} 